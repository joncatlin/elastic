input {

  # Read Docker logs from FileBeats
  beats {
    port => 5044
  }
}

#
# Filter the data received depending on its source
#
filter {

  # Break each msg down into a TIMESTAMP, LOG_LEVEL and MSG. Replace the filebeat TIMESTAMP with the one from 
  # the event so it reports the correct timestamp. Place the SEVERITY and MSG into the event sent to elastic
  # so that it is easier to see the message and perform logic on the severity.

  # Dissect the logs if the container name is the random logger used for testing the installation
  # breakout the timestamp the log level and the rest of the msg
  if [docker][container][name]  =~ /random-logger/ {
    dissect {
      mapping => { "message" => "%{ts} %{log_level} %{msg}" }
    }

    # Replace the filebeat timestamp with the one from the log
    date {
      match => [ "ts", "ISO8601" ]
    }

  } else {

    # Match the common log formats that we expect to get
    # grok {
    #   # Concord logging format
    #   match => {
    #     "message" => "%{TIMESTAMP_ISO8601:ts} \[%{WORD:log_level}\] (?<msg>.*)" 
    #   }
    #   # Logstash logging format
    #   match => {
    #     "message" => "\[%{WORD:log_level}\s*\] %{TIMESTAMP_ISO8601:ts} (?<msg>.*)" 
    #   }
    #   # Elastic logging format
    #   match => {
    #     "message" => "\[%{TIMESTAMP_ISO8601:ts}\]\[%{WORD:log_level}\s*\](?<msg>.*)" 
    #   }
    # }
    grok {
      # Match all the formats needed [Concord, Elasticsearch, Logstash]
      match => {
        "message" => [ 
          "%{TIMESTAMP_ISO8601:ts} \[%{WORD:log_level}\] (?<msg>.*)",
          "\[%{WORD:log_level}\s*\] %{TIMESTAMP_ISO8601:ts} (?<msg>.*)", 
          "\[%{TIMESTAMP_ISO8601:ts}\]\[%{WORD:log_level}\s*\](?<msg>.*)" 
        ]
      }
    }
 
    # Handle what happens if grok fails to match the ISO timestamp pattern
    # if "_grokparsefailure" in [tags] {
    #   mutate {
    #     add_field => { 
    #       "iso_timestamp" => "false"
    #       "log_level" => "UNKNOWN"
    #     }
    #   }

    # Assume that if there is no ts field then the matches failed
    if ![ts] {
      mutate {
        add_field => { 
          "event_detected" => "false"
          "log_level" => "UNKNOWN"
        }
      }
    } else {
      mutate {
        add_field => { "event_detected" => "true" }
      }

      # Replace the filebeat timestamp with the one from the log
      date {
        match => [ "ts", "ISO8601" ]
      }
    }
  }
}

output {
  # For debug purposes write all the processed data to the console in the container
  # Then use docker service logs -f <logstash service name> to see the results
#  stdout { codec => json }

  if [@metadata][pipeline] {
    elasticsearch {
      hosts => "es01:9200"
      manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      pipeline => "%{[@metadata][pipeline]}" 
    }
  } else {
    elasticsearch {
      hosts => "es01:9200"
      manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    }
  }
}



